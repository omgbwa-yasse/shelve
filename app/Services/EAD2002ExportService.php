<?php

namespace App\Services;

use App\Models\Record;
use Illuminate\Support\Collection;

class EAD2002ExportService
{
    /**
     * Export records as EAD 2002 XML (AtoM compatible format)
     */
    public function exportRecords(Collection $records): string
    {
        $xml = new \SimpleXMLElement('<?xml version="1.0" encoding="UTF-8"?><ead/>' );
        $eadheader = $xml->addChild('eadheader');
        $eadheader->addAttribute('langencoding', 'iso639-2b');
        $eadheader->addAttribute('countryencoding', 'iso3166-1');
        $eadheader->addAttribute('dateencoding', 'iso8601');
        $eadheader->addAttribute('repositoryencoding', 'iso15511');
        $eadheader->addAttribute('scriptencoding', 'iso15924');
        $eadheader->addAttribute('relatedencoding', 'DC');
        $eadid = $eadheader->addChild('eadid', date('Y-m-d') . '/' . uniqid());
        $eadid->addAttribute('identifier', 'export-' . date('Y-m-d-His'));
        $eadid->addAttribute('url', url('/'));
        $eadid->addAttribute('encodinganalog', 'identifier');
        $filedesc = $eadheader->addChild('filedesc');
        $titlestmt = $filedesc->addChild('titlestmt');
        $titleproper = $titlestmt->addChild('titleproper', 'Export de documents');
        $titleproper->addAttribute('encodinganalog', 'title');
        $publicationstmt = $filedesc->addChild('publicationstmt');
        $publisher = $publicationstmt->addChild('publisher', 'Archives');
        $publisher->addAttribute('encodinganalog', 'publisher');
        $date = $publicationstmt->addChild('date', date('Y-m-d'));
        $date->addAttribute('normal', date('Y-m-d'));
        $date->addAttribute('encodinganalog', 'date');
        $profiledesc = $eadheader->addChild('profiledesc');
        $creation = $profiledesc->addChild('creation', 'Generated by Shelve ' . date('Y-m-d H:i:s T'));
        $creationDate = $creation->addChild('date', date('Y-m-d H:i:s T'));
        $creationDate->addAttribute('normal', date('Y-m-d'));
        $langusage = $profiledesc->addChild('langusage');
        $language = $langusage->addChild('language', 'French');
        $language->addAttribute('langcode', 'fre');
        $archdesc = $xml->addChild('archdesc');
        $archdesc->addAttribute('level', 'collection');
        $archdesc->addAttribute('relatedencoding', 'ISAD(G)v2');
        $collectionDid = $archdesc->addChild('did');
        $collectionDid->addChild('unittitle', 'Export de documents');
        $collectionDid->addChild('unitid', 'EXPORT-' . date('Y-m-d'));
        $collectionDid->addChild('unitdate', date('Y-m-d'))->addAttribute('normal', date('Y-m-d'));
        $dsc = $archdesc->addChild('dsc');
        $dsc->addAttribute('type', 'combined');
        foreach ($records as $record) {
            $c = $dsc->addChild('c');
            $c->addAttribute('level', $record->level->name ?? 'item');
            $did = $c->addChild('did');
            $did->addChild('unittitle', htmlspecialchars($record->name, ENT_XML1, 'UTF-8'))->addAttribute('encodinganalog', '3.1.2');
            $did->addChild('unitid', htmlspecialchars($record->code ?: 'REC-' . $record->id, ENT_XML1, 'UTF-8'))->addAttribute('encodinganalog', '3.1.1');
            if ($record->date_start) {
                $dateNormal = $record->date_start;
                if ($record->date_end && $record->date_end !== $record->date_start) {
                    $dateNormal .= '/' . $record->date_end;
                }
                $dateDisplay = $record->date_exact ?? $record->date_start;
                $did->addChild('unitdate', htmlspecialchars($dateDisplay, ENT_XML1, 'UTF-8'))
                    ->addAttribute('normal', $dateNormal);
                $did->unitdate->addAttribute('encodinganalog', '3.1.3');
            }
            if ($record->support) {
                $did->addChild('physdesc', htmlspecialchars($record->support->name, ENT_XML1, 'UTF-8'))
                    ->addAttribute('encodinganalog', '3.1.5');
            }
            if ($record->organisation) {
                $repository = $did->addChild('repository');
                $repository->addChild('corpname', htmlspecialchars($record->organisation->name, ENT_XML1, 'UTF-8'));
            }
            if ($record->languages && method_exists($record->languages, 'isNotEmpty') && $record->languages->isNotEmpty()) {
                $langmaterial = $did->addChild('langmaterial');
                $langmaterial->addAttribute('encodinganalog', '3.4.3');
                foreach ($record->languages as $lang) {
                    $language = $langmaterial->addChild('language', htmlspecialchars($lang->name, ENT_XML1, 'UTF-8'));
                    $language->addAttribute('langcode', $lang->code ?? 'und');
                }
            }
            if ($record->extent) {
                $did->addChild('extent', htmlspecialchars($record->extent, ENT_XML1, 'UTF-8'));
            }
            if ($record->archival_history) {
                $c->addChild('bioghist', htmlspecialchars(strip_tags($record->archival_history), ENT_XML1, 'UTF-8'));
            }
            if ($record->custodial_history) {
                $c->addChild('custodhist', htmlspecialchars(strip_tags($record->custodial_history), ENT_XML1, 'UTF-8'));
            }
            if ($record->acquisition_source) {
                $c->addChild('acqinfo', htmlspecialchars(strip_tags($record->acquisition_source), ENT_XML1, 'UTF-8'));
            }
            if ($record->appraisal) {
                $c->addChild('appraisal', htmlspecialchars(strip_tags($record->appraisal), ENT_XML1, 'UTF-8'));
            }
            if ($record->accruals) {
                $c->addChild('accruals', htmlspecialchars(strip_tags($record->accruals), ENT_XML1, 'UTF-8'));
            }
            if ($record->arrangement) {
                $c->addChild('arrangement', htmlspecialchars(strip_tags($record->arrangement), ENT_XML1, 'UTF-8'));
            }
            if ($record->legal_status) {
                $archdesc->addAttribute('LEGALSTATUS', htmlspecialchars($record->legal_status, ENT_XML1, 'UTF-8'));
            }
            if ($record->status) {
                $accessrestrict = $c->addChild('accessrestrict');
                $accessrestrict->addAttribute('encodinganalog', '3.4.1');
                $accessrestrict->addChild('p', htmlspecialchars($record->status->name, ENT_XML1, 'UTF-8'));
            }
            if ($record->copyright) {
                $userestrict = $c->addChild('userestrict');
                $userestrict->addChild('p', htmlspecialchars(strip_tags($record->copyright), ENT_XML1, 'UTF-8'));
            }
            if ($record->physical_details) {
                $c->addChild('physfacet', htmlspecialchars(strip_tags($record->physical_details), ENT_XML1, 'UTF-8'));
            }
            if ($record->finding_aids) {
                $c->addChild('otherfindaid', htmlspecialchars(strip_tags($record->finding_aids), ENT_XML1, 'UTF-8'));
            }
            if ($record->originals_location) {
                $c->addChild('originalsloc', htmlspecialchars(strip_tags($record->originals_location), ENT_XML1, 'UTF-8'));
            }
            if ($record->copies_location) {
                $c->addChild('altformavail', htmlspecialchars(strip_tags($record->copies_location), ENT_XML1, 'UTF-8'));
            }
            if ($record->related_units) {
                $c->addChild('relatedmaterial', htmlspecialchars(strip_tags($record->related_units), ENT_XML1, 'UTF-8'));
            }
            if ($record->associated_material) {
                $c->addChild('separatedmaterial', htmlspecialchars(strip_tags($record->associated_material), ENT_XML1, 'UTF-8'));
            }
            if ($record->bibliography) {
                $c->addChild('bibliography', htmlspecialchars(strip_tags($record->bibliography), ENT_XML1, 'UTF-8'));
            }
            if ($record->authors && method_exists($record->authors, 'isNotEmpty') && $record->authors->isNotEmpty()) {
                $origination = $did->addChild('origination');
                $origination->addAttribute('encodinganalog', '3.2.1');
                foreach ($record->authors as $author) {
                    $name = $origination->addChild('name', htmlspecialchars($author->name, ENT_XML1, 'UTF-8'));
                    $name->addAttribute('id', 'atom_' . $author->id . '_actor');
                }
            }
            if ($record->content) {
                $scopecontent = $c->addChild('scopecontent');
                $scopecontent->addAttribute('encodinganalog', '3.3.1');
                $scopecontent->addChild('p', htmlspecialchars(strip_tags($record->content), ENT_XML1, 'UTF-8'));
            }
            if ($record->keywords && method_exists($record->keywords, 'isNotEmpty') && $record->keywords->isNotEmpty()) {
                $odd = $c->addChild('odd');
                $odd->addAttribute('type', 'keywords');
                $odd->addChild('p', htmlspecialchars($record->keywords->pluck('name')->implode(', '), ENT_XML1, 'UTF-8'));
            }
            if ($record->note) {
                $odd = $c->addChild('odd');
                $odd->addAttribute('type', 'note');
                $odd->addChild('p', htmlspecialchars(strip_tags($record->note), ENT_XML1, 'UTF-8'));
            }
            foreach ($record->attachments as $attachment) {
                $dao = $did->addChild('dao');
                $dao->addAttribute('linktype', 'simple');
                $dao->addAttribute('href', htmlspecialchars($attachment->path, ENT_XML1, 'UTF-8'));
                $dao->addAttribute('role', 'reference');
                $dao->addAttribute('actuate', 'onrequest');
                $dao->addAttribute('show', 'embed');
                if ($attachment->name) {
                    $dao->addAttribute('label', htmlspecialchars($attachment->name, ENT_XML1, 'UTF-8'));
                }
            }
            if ($record->containers && method_exists($record->containers, 'isNotEmpty') && $record->containers->isNotEmpty()) {
                $originalsloc = $c->addChild('originalsloc');
                $originalsloc->addAttribute('encodinganalog', '3.5.1');
                $locText = $record->containers->pluck('code')->join(', ');
                $originalsloc->addChild('p', htmlspecialchars($locText, ENT_XML1, 'UTF-8'));
            }
        }
        $dom = new \DOMDocument('1.0', 'UTF-8');
        $dom->preserveWhiteSpace = false;
        $dom->formatOutput = true;
        $dom->loadXML($xml->asXML());
        return $dom->saveXML();
    }
}
