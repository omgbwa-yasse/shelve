#!/usr/bin/env node

/**
 * Test sp√©cifique pour l'endpoint de reformulation simplifi√©e
 */

const axios = require('axios');

const BASE_URL = process.env.MCP_URL || 'http://localhost:3001';
const API_URL = `${BASE_URL}/api`;

console.log('üß™ Test de reformulation simplifi√©e MCP Shelve...');
console.log(`üì° URL: ${API_URL}\n`);

async function testReformulation() {
  try {
    // Exemple de donn√©es comme sp√©cifi√©
    const testData = {
      id: "REC001",
      name: "Documents travaux mairie",
      date: "1920-1925", 
      content: "Dossier contenant les plans, devis et correspondance relatifs aux travaux d'agrandissement de la mairie entre 1920 et 1925",
      author: {
        name: "Architecte Dubois"
      },
      children: [
        {
          name: "Plans architecte",
          date: "1920",
          content: "Plans de l'extension de la mairie r√©alis√©s par l'architecte Dubois"
        },
        {
          name: "Devis entrepreneur", 
          date: "1921",
          content: "Devis d√©taill√© des travaux √©tabli par l'entreprise Martin"
        },
        {
          name: "Correspondance administrative",
          date: "1920-1925", 
          content: "√âchanges entre la mairie et les diff√©rents intervenants du projet"
        }
      ]
    };

    console.log('üì§ Envoi de la requ√™te de reformulation...');
    console.log('Donn√©es d\'entr√©e:', JSON.stringify(testData, null, 2));
    console.log('');

    const response = await axios.post(`${API_URL}/records/reformulate`, testData, {
      headers: {
        'Content-Type': 'application/json'
      },
      timeout: 30000 // 30 secondes pour l'IA
    });

    console.log('‚úÖ Reformulation r√©ussie !');
    console.log('üì§ R√©ponse:');
    console.log(`   ID: ${response.data.id}`);
    console.log(`   Nom original: "${testData.name}"`);
    console.log(`   Nouveau nom: "${response.data.new_name}"`);
    
    return true;

  } catch (error) {
    console.log('‚ùå Erreur lors de la reformulation:', error.message);
    
    if (error.response) {
      console.log(`   üìä Statut: ${error.response.status}`);
      console.log(`   üìä Erreur: ${JSON.stringify(error.response.data, null, 2)}`);
    }
    
    return false;
  }
}

async function testHealthFirst() {
  try {
    console.log('üîç V√©rification de l\'√©tat du serveur...');
    const response = await axios.get(`${API_URL}/health`, { timeout: 5000 });
    console.log('‚úÖ Serveur disponible\n');
    return true;
  } catch (error) {
    console.log('‚ùå Serveur non disponible:', error.message);
    console.log('   Assurez-vous que le serveur MCP est d√©marr√©\n');
    return false;
  }
}

// Test d'exemples multiples
async function testMultipleExamples() {
  const examples = [
    {
      id: "REC002",
      name: "Registre personnel enseignant",
      date: "1945-1975",
      content: "Registre du personnel enseignant de l'√©cole primaire communale",
      author: { name: "Secr√©tariat mairie" }
    },
    {
      id: "REC003", 
      name: "Dossier construction √©cole",
      content: "Travaux de construction de la nouvelle √©cole primaire",
      children: [
        { name: "Permis de construire", date: "1958" },
        { name: "Plans", date: "1958-1959" }
      ]
    },
    {
      id: "REC004",
      name: "Correspondance pr√©fet",
      date: "1960-1965",
      content: "Correspondance √©chang√©e avec la pr√©fecture concernant les affaires communales"
    }
  ];

  console.log('üìã Test avec plusieurs exemples...\n');
  
  let successCount = 0;
  
  for (let i = 0; i < examples.length; i++) {
    const example = examples[i];
    console.log(`üîÑ Test ${i + 1}/${examples.length} - ID: ${example.id}`);
    
    try {
      const response = await axios.post(`${API_URL}/records/reformulate`, example, {
        headers: { 'Content-Type': 'application/json' },
        timeout: 30000
      });
      
      console.log(`   ‚úÖ "${example.name}" ‚Üí "${response.data.new_name}"`);
      successCount++;
      
    } catch (error) {
      console.log(`   ‚ùå Erreur: ${error.message}`);
    }
    
    console.log('');
  }
  
  console.log(`üìä R√©sultats: ${successCount}/${examples.length} reformulations r√©ussies`);
  return successCount === examples.length;
}

// Ex√©cution des tests
async function runAllTests() {
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log('           TEST REFORMULATION SIMPLIFI√âE MCP          ');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
  
  // 1. V√©rifier l'√©tat du serveur
  const healthOk = await testHealthFirst();
  if (!healthOk) {
    process.exit(1);
  }
  
  // 2. Test simple
  console.log('üéØ Test de reformulation simple...\n');
  const simpleOk = await testReformulation();
  
  if (simpleOk) {
    console.log('\n' + '‚îÄ'.repeat(50) + '\n');
    
    // 3. Tests multiples
    const multipleOk = await testMultipleExamples();
    
    if (multipleOk) {
      console.log('\nüéâ Tous les tests sont pass√©s ! L\'endpoint de reformulation fonctionne parfaitement.');
      console.log('\nüìñ Utilisation:');
      console.log(`   POST ${API_URL}/records/reformulate`);
      console.log('   Content-Type: application/json');
      console.log('   Body: { id, name, date?, content?, author?, children? }');
      console.log('   Response: { id, new_name }');
    } else {
      console.log('\n‚ö†Ô∏è  Certains tests ont √©chou√©.');
      process.exit(1);
    }
  } else {
    console.log('\n‚ùå Le test principal a √©chou√©.');
    process.exit(1);
  }
}

// Gestion des erreurs
process.on('unhandledRejection', (error) => {
  console.error('‚ùå Erreur non g√©r√©e:', error.message);
  process.exit(1);
});

// Lancement
runAllTests().catch(error => {
  console.error('‚ùå Erreur lors des tests:', error.message);
  process.exit(1);
});
